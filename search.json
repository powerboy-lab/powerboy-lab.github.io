[{"path":"/2024/08/22/02-核心语法/","content":"1、注释1.1 单行注释 语法：&#x2F;&#x2F; 待注释的内容 位置：可放在代码后，称之为行尾注释； 也可放代码上一行，称作行上注释。 1// 这是单行注释文字 1.2 多行注释 语法：&#x2F;* 待注释的内容 *&#x2F; 注意：多⾏注释内，可以嵌套单⾏注释。 多⾏注释之间不能嵌套。 123456/*这是多行注释文字这是多行注释文字这是多行注释文字*/注意：多行注释不能嵌套使用。 1.3 示例12345678910111213#include &lt;stdio.h&gt; /*这里是多行注释书写的内容*/int main(void) &#123; printf(&quot;HelloWorld &quot;);\t// 这是单行注释，此行为输出 HelloWorld // 单行注释，可以放在代码行尾，也可以放在行上\treturn 0; &#125; 1.4 注释的小扩展 注释的快捷键：Ctrl + K，Ctrl + C&#x2F;U 注释擦除：注释的内容，不参与运行 注释的嵌套：不管是单行还是多行，最好都不要嵌套 2，关键字关键字：在C语言中被赋予了特定含义的英文单词，一共有32个关键字 但是不需要背，后面会挨个讲解，现在只要只有关键字的两个特点即可： 关键字全部小写 在特定的编译器中，关键字是高亮显示的 vs：蓝色或者紫色 vs：蓝色 123auto break case char const continue default do double else enum extern float for goto if int long register return short signedsizeof static struct switch typedef union unsigned void volatile while 现在知道两个关键字即可： int：表示整数 return：表示程序结束了 3, 常量3.1 什么是常量​\t程序运行的过程中，其值永远不会发生改变的数据 3.2 常量的分类 3.3 练习​\t给你一组数据，说出下面每组数据中，分别是哪种类型的常量 1234567891011121314150\t:整形常量0.0\t:实型常量-25\t:整形常量123 :整形常量17.0:实型常量‘’ :语法错误‘ ’ :字符常量‘a’ :字符常量‘!’ :字符常量‘#’ :字符常量‘ab’:语法错误‘题’:语法错误‘￥’:语法错误“” :字符串常量“你好”:字符串常量 3.4 细节补充实型常量的小细节： 小数点前后，如果只有0，可以省略不写 120.93 可以写成 .9318.0 可以写成 18. 科学计数法是实型常量，但是要写E 1212340000 可以写成 1.2340000E7但是写成 1.234 * 10的7次方就错误了，因为这是一个计算过程，不是最终的数字 3.5 练习 选择题： 121. 以下选项中正确的整型常量是：BA） 12. B) -20 C) 1,000 D) 4 5 6 选择题： 122.以下选项中正确的实型常量是：DA） 0 B) -31 C) 0.329×102 D) .871 选择题 123.以下选项中不正确的实型常量是:BA） 2.607E-1\tB) 0.8103e 2\tC) -77.77 D) 456e-2 选择题 124. 想要进行数学计算，下面正确的写法是： CA）“12”+ 13\tB)“23”+“13” C) 13 + 23 D)“1.2”+ 3.7 3.6 输出常量利用printf集合占位符的方式可以输出常量 格式： ​\tprintf（参数1，参数2）； ​\t参数1：输出内容的最终样式，以字符串的形式体现 （必填） ​\t参数2：填补的内容 （选填） 占位符： 占位符 说明 整形 %d 实型 %f 字符 %c 字符串 %s 举例1： ​\t输出一个整数 123456#include &lt;stdio.h&gt;int main()&#123; printf(&quot;%d&quot;, 10); return 0;&#125; 举例2： ​\t输出一个小数 123456#include &lt;stdio.h&gt;int main()&#123; printf(&quot;%f&quot;, 1.93); return 0;&#125; 举例3： ​\t输出一个字符 123456#include &lt;stdio.h&gt;int main()&#123; printf(&quot;%c&quot;, &#x27;A&#x27;); return 0;&#125; 举例4： ​\t输出一个字符串 123456789#include &lt;stdio.h&gt;int main()&#123; // 第一种方式: printf(&quot;Hello World!&quot;); // 第二种方式： printf(&quot;我的名字为：%s&quot;,&quot;尼古拉斯·纯情·暖男·天真·阿玮&quot;); return 0;&#125; 举例3： ​\t输出一段话 123456#include &lt;stdio.h&gt;int main()&#123; printf(&quot;阿玮的身高为：%f米&quot;, 1.93); return 0;&#125; 123456#include &lt;stdio.h&gt;int main()&#123; printf(&quot;阿玮的年龄为：%d岁&quot;, 1.93); return 0;&#125; 作业练习： 按照要求输出以下内容： 1，我学校的名字为：XXXXX ​ 要求：学校的名字需要结合占位符的形式进行输出 2，我高考的总分为：XXX分 ​ 要求：总分需要结合占位符的形式进行输出 3，我亲亲女朋友的名字是：XXX ​ 要求：女朋友的名字需要结合占位符的形式进行输出 12345678910#include &lt;stdio.h&gt;int main()&#123; // 练习1：打印学校的名字 printf(&quot;我学校的名字为:%s&quot;,&quot;珞珈山职业技术学院&quot;); // 练习2：打印高考的成绩 printf(&quot;我高考的总分为：%f分&quot;, 666.0); return 0;&#125; 3.7 输出多个常量一个printf中可以同时输出多个数据，占位符和后面的数据要一一对应 练习：输出以下内容： ​\t我亲亲女朋友的姓名是：小诗诗。性别：女。年龄：18岁。身高：1米82。体重：110斤。 ​\t要求：女朋友的姓名，性别，年龄，身高，体重等信息需要结合占位符的形式进行输出 123456#include &lt;stdio.h&gt;int main()&#123; printf(&quot;我亲亲女朋友的姓名是：%s。性别：%s。年龄：%d岁。身高：%f。体重：%d斤&quot;, &quot;小诗诗&quot;,&quot;女&quot;,18,1.82,110); return 0;&#125; 3.8 输出并换行 操作系统 换行符 windows \\r mac \\r Linux 平时写代码的时候，想要换行直接写 即可，C语言会根据不同的操作系统解析成对应的换行符 练习：输出以下内容 ​\t我亲亲女朋友的姓名是：小丹丹。性别：女。年龄：19岁。身高：1米63。体重：90斤。 要求1：女朋友的姓名，性别，年龄，身高，体重等信息需要结合占位符的形式进行输出 要求2：每一个数据单独成一行 1234567891011#include &lt;stdio.h&gt;int main()&#123;\tprintf(&quot;我亲亲女朋友的姓名是：%s &quot;, &quot;小丹丹&quot;);\tprintf(&quot;性别：%s &quot;, &quot;女&quot;);\tprintf(&quot;年龄：%d岁 &quot;, 19);\tprintf(&quot;身高：%f &quot;, 1.63);\tprintf(&quot;体重：%d斤 &quot;, 90);\treturn 0;&#125; 4，变量4.1 变量的三要素 变量名：用来在程序中使用。 变量类型：开辟内存空间大小。 变量值：存储的实际数据 4.2 变量定义：​\t类型名 变量名 &#x3D; 变量值（一般都这么写） ​\t举例： ​\tint m &#x3D; 57; 会开辟内存空间给变量。变量声明不会开辟内存空间。 代码演示： 12345678910111213141516#include &lt;stdio.h&gt;int main()&#123;\t// 1. 定义格式： // 数据类型 变量名; int a; // 2. 赋值/修改值 // 变量名 = 数据值； a = 10; // 3. 如果定义的时候已经知道了变量中要存储什么样的数据 // 数据类型 变量名 = 数据值； int b = 20; return 0;&#125; 变量的练习 两数相加 12345678910#include &lt;stdio.h&gt;int main()&#123;\t//定义两个变量相加并求和 int a = 10; int b = 20; printf(&quot;%d &quot;, a + b); return 0;&#125; 微信余额 用一个变量表示微信的余额需求:一开始微信的余额为100元， 收到了一个2元的红包 经常发生改变的数据，我们可以用变量来表示 12345678910#include &lt;stdio.h&gt;int main()&#123;\t//定义变量表示余额 int money = 100; money = money + 2; printf(&quot;%d &quot;, money); return 0;&#125; 4.3 变量的注意事项 只能存一个值 变量名不允许重复定义 一条语句可以定义多个变量 变量在使用之前一定要进行赋值 变量的作用域范围 1234567891011121314151617181920212223242526272829#include &lt;stdio.h&gt;int main()&#123;\t// 1. 变量中只能存一个值\tint a = 10;\tprintf(&quot;%d &quot;, a);\ta = 20;\tprintf(&quot;%d &quot;, a);// 20\t// 2. 变量名不允许重复\t// int a = 20;\t// printf(&quot;%d &quot;, a);\t// 3.一条语句可以定义多个变量（了解）\tint b = 10, c = 20, d = 30;\tprintf(&quot;%d &quot;, b);\tprintf(&quot;%d &quot;, c);\tprintf(&quot;%d &quot;, d);\t// 4.变量在使用之前，一定要赋值\t//int e;\t//printf(&quot;%d &quot;, e);\t// 5.变量的作用范围(暂时不讲)\treturn 0;&#125;"},{"path":"/2024/08/22/01-初识C语言/","content":"一、C语言的简介什么是C语言 C语言之父 C语言的由来 C语言的发展 为什么要学C语言&#x2F;能做什么 为什么要学习这套C语言 本套课程适用人群 课程内容介绍 1、C语言标准1.1 标准简史 1972年C语⾔在⻉尔实验室诞⽣. 丹尼斯·⾥奇 参考B语⾔开发. 1970-80年代，C语⾔被⼴泛应⽤，产⽣很多不同的C语⾔版本. 程序可移植性⽐较差. 1983年，美国国家标准委员会(ANSI) 成⽴⼀个⼩组来制定C语⾔的标准. C语⾔⽀持哪些语法、⽀持哪些功能 等等. 1989年，通过了C语⾔的第⼀个标准. C89标准. 1990年，国际标准化组织(ISO) 和 国际电⼯委员会(IEC) 将 C89标准当做国际的C语⾔标准. C90标准. C89和 C90指的是同⼀个标准 1994年 ISO和 IEC 对 C89标准进⾏修订. C94标准. 由于并没有增加新的语法特性，还是叫做 C89或者C90. 1995年 ISO和IEC再次做了修正，C95 标准. 1999年 ISO 和 IEC 发布了C语⾔新标准. C语⾔第⼆个标准. 在该标准中，新增许多实⽤的C语⾔语法特性. 增 加新的关键字、可变⻓数组等等. C99标准 2007年，重新修订了C语⾔. 2011年， 发布新的版本。新增了⼀些语法，泛型、国际化⽀持. ⽬前为⽌最新版本是 C11. 1.2 标准的影响 可将C语⾔的标准理解为C语⾔说明书。但其并没有强制性约束⼒。 如：微软拿到标准，认为有些标准不合理，不⽀持。 微软认为某些特性⾮常好，但标准中没有，微软可以修改标准，新增语法. 如果编译器不⽀持标准，我们即使使⽤标准中的语法仍然会报错。 编译器版本也会影响程序。因此，编写程序之前要确定编译器版本。 1.3 常见的C&#x2F;C++编译器: Borland C++ 宝蓝公司 Intel C++ 英特尔编译器 VC++ 微软公司 g++编译器（gcc是编译套件）, Linux 默认使⽤的编译器. 对标准⽀持最好. ###1.4 C语⾔的优缺点 1.4.1 优点： 学习成本低。 运⾏速度快。 功能强⼤。 1.4.2 缺点： 代码实现周期⻓ 可移植性差 对经验要求⾼ 对平台库依赖多 1.5 C语言的应用领域 服务器。 操作系统。 上层应⽤。 MFC、QT 嵌⼊式。 ⼈⼯智能、硬件驱动。 中间件。 ⽹络攻防、数据安全。 ⼤学必修课。 名企、外企。 2、常见开发工具 Windows操作系统 vs（visual studio）2013、2015、2017、2019、2022 Clion：跨平台IDE、跟Java的IDEA、python的pycharm是同一家公司的 Qt Creator 跨平台IDE MacOS（苹果电脑的操作系统） XcodeClion：跨平台IDE。Qt Creator 跨平台IDE。 Linux： vi&#x2F;vim —— ⽂本编辑器。Clion：跨平台IDE。Qt Creator 跨平台IDE。 备注：大多企业开发用vs会更多一些 3、第一个程序3.1 环境搭建： 打开微软的官方网站 https://visualstudio.microsoft.com/，下载 Visual Studio 安装包。 双击安装包进行安装 操作一：在 “工作负荷” 标签页中，选择 “使用 C++的桌面开发” 选项即可。 ​\t操作二：“安装位置” 中修改安装路径。 路径的要求： ​\t1，不要有中文，不要有空格，不要有一些特殊符号 ​\t2，选择一个统一的文件夹进行管理 自动下载并安装，过程略微漫长，耐心等待。 安装完成，弹出 “安装完毕” 对话框。 点击确定。 接下来，VS希望你使用微软的账号登录，没有可以注册一个。也可以点击“暂时跳过此项”。 根据提示选择一个自己喜欢的主题 点击启动，到此整个环境全部搭建完毕 3.2 第一个代码HelloWorld 创建项目 点击 “创建新项目”，创建一个项目。 选择创建 “控制台应用”，点击下一步。 指定项目名称。确保位置下的项目存储目录存在。 勾选 “将解决方案和项目…..” ，点击 “创建”。 右侧的解决方案管理器可以按照自己的习惯是放在左侧或者右侧 默认是右侧，可以拖到左侧来，每个人的习惯不同，没有固定标准 创建 helloworld.c ⽂件 右键选择原文件，选择添加，选择新建项 在弹出的编辑框中，选中 “C++文件(.cpp)”，将 下方 “源.cpp” 手动改为要新创建的文件名， 如：helloWorld.c 。注意，默认 cpp 后缀名，要手动改为 .c 后缀名，然后点击 “添加”。 编写 helloworld.c程序。 123456#include &lt;stdio.h&gt;int main(void)&#123; printf(&quot;hello world! &quot;); return 0;&#125; 点击上方绿色空心三角运行即可 3.2 代码逐行分析 ‘#include’ ： 引⼊头⽂件专⽤关键字。 &lt;&gt; : ⽤来包裹 库头⽂件名 stdio.h : 使⽤的头⽂件。因为程序中使⽤了 printf() 函数。就必须使⽤该头⽂件。 std：标准：standardi： input 输⼊。o： output 输出。 int ：main 函数返回值为整型。 main： 整个程序的⼊⼝函数。 任何.c 程序，有且只有⼀个 main 函数。 printf(); C语⾔向屏幕输出字符使⽤的函数。 printf(“helloworld ”) printf（）；向屏幕输出一段内容 helloworld： 待写出的字符串内容。 : 回⻋换⾏。 return 0； return 返回。 C程序要求，main 函数要有返回值。借助 return 实现返回。 0：成功！因为 int ，返回整数。 注意事项 程序中使⽤的所有的字符，全部是 “英⽂半⻆” 字符。 程序中，严格区分⼤⼩写。 “;” 代表⼀⾏结束。不能使⽤ 中⽂ “；”，必须是英⽂。 3.3 代码执行流程分析完成的C语言运行，分为以下4步，在VS中我们直接运行，其实是把中间的步骤给省略了 预处理（这一步后面单独讲解） 简单理解，就是先找到#include后面的 &lt;stdio.h&gt;这个文件 编译 把c文件编译成二进制文件后缀名为obj 连接&#x2F;链接 把预处理找到的h文件，还有编译之后产生的obj文件打包在一起，产生exe文件 运行 运行exe文件"},{"path":"/2024/08/22/3. V2rayA安装/","content":"sudo apt install net-toolsifconfig 软路由安装教程，闲置笔记本设置旁路由，双臂路由！科学上网更快更稳定！2020 | 零度解说https://www.youtube.com/watch?v=nEU4hbZYj6c 节点订阅zqjc.org 免费节点https://www.youtube.com/playlist?list=PLU5ZBgZNBmfJdFguEU7Ur78PQed0qEu9K V2rayN 安装Ubuntu V2rayAhttps://v2raya.org/docs/prologue/installation 设置大陆白名单模式端口转发 windowshttps://github.com/2dust/v2rayN/releases/download/6.33/zz_v2rayN-With-Core-SelfContained.7z 透明网关设置允许来自局域网的连接系统代理PAC 模式路由全局模式账户密码&#119;&#106;&#x6b;&#55;&#49;&#55;&#57;&#50;&#x33;&#x36;&#64;&#49;&#x32;&#54;&#46;&#99;&#x6f;&#x6d;QQ19910617 【全网最全】Windows、Linux、Mac 充当软路由的方法，无需刷入 openwrt，闲置笔记本电脑自带操作系统直接变身旁路由方法大全https://bulianglin.com/archives/router.html 添加公钥 1wget -qO - https://apt.v2raya.org/key/public-key.asc | sudo tee /etc/apt/keyrings/v2raya.asc 添加 V2RayA 软件源 12echo &quot;deb [signed-by=/etc/apt/keyrings/v2raya.asc] https://apt.v2raya.org/ v2raya main&quot; | sudo tee /etc/apt/sources.list.d/v2raya.listsudo apt update 安装 V2RayA 1sudo apt install v2raya v2ray ## 也可以使用 xray 包 启动 v2rayA 1sudo systemctl start v2raya.service 设置开机自动启动 1sudo systemctl enable v2raya.service"},{"path":"/2024/08/22/2. docker安装/","content":"安装教程https://blog.csdn.net/Apricity_L/article/details/137064982https://blog.csdn.net/qq_44796920/article/details/139573309 1. 进入管理员模式 1sudo su 2. 输入密码3. 卸载原有可能存在的Docker软件 1for pkg in docker.io docker-doc docker-compose docker-compose-v2 podman-docker containerd runc; do sudo apt-get remove $pkg; done 4. 更新软件源 12sudo apt-get updatesudo apt-get upgrade 5. 安装docker依赖 1apt-get install ca-certificates curl gnupg lsb-release 6. 添加docker秘钥 1curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add - 7. 添加Docker软件源 1sudo add-apt-repository &quot;deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable&quot; 8. 安装Docker 1apt-get install docker-ce docker-ce-cli containerd.io 9. 查看是否安装成功 1docker --version 10. 配置用户组 1sudo usermod -aG docker $USER 11. 启动Docker 1systemctl start docker 12. 安装工具 1apt-get -y install apt-transport-https ca-certificates curl software-properties-common 13. 重启Docker 1service docker restart 14. 显示镜像列表 1docker images 15. 安装vim 1apt install vim 16. 修改配置文件 1vim /etc/docker/daemon.json 17. 配置内容 12345678910111213141516171819202122232425262728&#123; &quot;builder&quot;: &#123; &quot;gc&quot;: &#123; &quot;defaultKeepStorage&quot;: &quot;20GB&quot;, &quot;enabled&quot;: true &#125; &#125;, &quot;experimental&quot;: true, &quot;features&quot;: &#123; &quot;buildkit&quot;: true &#125;, &quot;insecure-registries&quot;: [ &quot;172.24.86.231&quot; ], &quot;registry-mirrors&quot;: [ &quot;https://dockerproxy.com&quot;, &quot;https://mirror.baidubce.com&quot;, &quot;https://ccr.ccs.tencentyun.com&quot;, &quot;https://docker.m.daocloud.io&quot;, &quot;https://docker.nju.edu.cn&quot;, &quot;https://docker.mirrors.ustc.edu.cn&quot; ], &quot;log-driver&quot;:&quot;json-file&quot;, &quot;log-opts&quot;: &#123; &quot;max-size&quot;:&quot;500m&quot;, &quot;max-file&quot;:&quot;3&quot; &#125;&#125; 18. docker重启 12sudo systemctl daemon-reloadsudo systemctl restart docker 19. 运行helloWord 1sudo docker run hello-world https://www.kejiwanjia.net/jiaocheng/57242.htmlhttps://www.youtube.com/watch?v=6OeGOK2-1zohttps://blog.isayme.org/posts/issues-65/"},{"path":"/2024/08/22/1. Ubuntu安装/","content":"Markdown语法https://www.runoob.com/markdown/md-advance.html 一. ubuntu镜像下载地址ubuntu-22.04.4-desktop-amd64.isohttps://mirrors.tuna.tsinghua.edu.cn/ubuntu-releases/22.04.4/ 二. 镜像工具rufus-4.5 三. ssh服务12sudo apt updatesudo apt install -y ssh 远程软件MobaXterm"},{"path":"/2024/08/22/6. git操作手册/","content":"C-Programming-LanguageGithub网站第一步 加入Vehicle-Engineering小组Your organizations —- Organizations ——Vehicle-Engineering —-accept 第二步 进入C-Programming-Language-Experiment项目Vehicle Engineering —– Repositories —- C-Programming-Language-Experiment 第三步 获取项目SSH地址右上角绿色code — 点击SSH —- 复制地址 Ubuntu系统第一步 绑定自己Github账户在命令框中逐步执行以下命令1234567sudo apt install openssh-serversudo systemctl status sshsudo ufw allow sshssh-keygen -t rsa -C &quot;你的QQ邮箱&quot;ls -alcd .ssh //找到id_rsa.pub文件的位置，在.SSH文件夹中cat id_rsa.pub //查看SSH密钥 复制SSH密钥，进入Github官网，settings — SSH and GPG keys —- New SSH key — 粘贴SSH密钥 （名称随便）第二步 下载Git1sudo apt install git 第三步 建立文件夹 可命名为C-Programming-Language-Experiment （每周实验报告都放在这个文件夹里）12mkdir C-Programming-Language-Experiment //建立C-Programming-Language-Experiment文件夹cd C-Programming-Language-Experiment //进入文件夹页面 12git initmdkir 第5周 //建立文件夹第5周 第四步 通过MobaXterm远程软件将自己的实验报告.md，C语言代码相关文件 拉入第5周文件夹中第五步 上传至Github仓库命令框中逐步执行以下命令 1234567891011121314151617181920212223242526272829303132333435363738git config user.name &quot;xiaoming&quot;git config user.email &quot;你的QQ邮箱&quot;git config --list # 核对信息是否正确git statusgit add .git statusgit commit -m &quot;第5周作业&quot;git statusgit add/rm file //提交至暂存区git branch -v #查看本地分支状态git branch &lt;BranchName&gt; #建立新分支git checkout &lt;BranchName&gt; #进入分支状态git statusgit branch -d &lt;BranchName&gt; #删除本地分支git merge branch //合并分支git remote -v # 查看当前所有远程仓库别名git remote add 别名 仓库链接 # 创建仓库别名git remote remove 别名 # 移除别名git branch -a #查看所有分支 包括远程git push 别名/仓库链接 本地分支:远程仓库分支git push origin -all #本地分支全部推送到远程git push origin --delete &lt;BranchName&gt; #删除远程分支git push -u MusicProject master #默认推送分支git clone -b 分支名 仓库链接 #克隆制定分支git clone 仓库链接 #克隆默认分支maingit remote set-url origin 仓库链接 #改变仓库链接git remote -v #查看目前绑定的仓库git pull origin/仓库别名/仓库链接 master/分支名git pull --rebasegit pull origin/仓库别名/仓库链接 master/分支名 --allow-unrelated-histories #版本冲突无法合并 其他git命令12345678910git loggit log --pretty=onelinegit reflog # 查看提交命令历史git restore readme.txt # 撤销readme.txt文件的修改git restore --staged readme.txt # 将暂存区的修改放回工作区git reflog # 修改版本号git reset --hard 版本号 //选择修改版本git diff 文件名 Git操作教程Git 基本使用 https://blog.csdn.net/weixin_52122271/article/details/126132677Git 分支 https://blog.csdn.net/weixin_52122271/article/details/135842459Git教程——GitHub、团队内协作、跨团队协作 https://blog.csdn.net/weixin_52122271/article/details/135858483"},{"path":"/2024/08/22/重要博客/","content":"Clash for OpenWRT（软路由）实现全屋设备科学上网vipc9.com NAS上Emby的海报墙搜刮不出来怎么办？【解决方案】https://inurl.top/archives/embyhaibao/ 群晖nas如何安装emby？片源搜刮、媒体库配置、插件安装https://zhuanlan.zhihu.com/p/622800596 【软路由篇】2024新手软路由指南，什么是软路由？为什么要软路由？小白怎么上手软路由？全家科学上网看这篇就够了！https://bulianglin.com/archives/openwrt.html 玩客云刷Armbian安装docker、alist、OpenWrt、Aria2等教程及所需文件(内容详细)https://blog.csdn.net/hcfhshl/article/details/137676638 新版v2rayN使用教程，真·全局网络代理，如何在v2rayN使用hysteria&#x2F;Clash &#x2F;Clashmeta&#x2F;sing_box主流热门代理软件TUN开启教程及使用方法！https://www.youtube.com/watch?v=6ntiUdY7dWU https://github.com/Aliang-code/automatic-theater-jellyfin?tab=readme-ov-file#-%E4%BD%BF%E7%94%A8"},{"path":"/2024/08/22/5. 影音库安装/","content":"家庭影音库https://github.com/Aliang-code/automatic-theater-jellyfin?tab=readme-ov-file#-%E4%BD%BF%E7%94%A8 &#x77;&#106;&#x6b;&#x37;&#x31;&#x37;&#x39;&#x32;&#51;&#x36;&#64;&#x31;&#50;&#54;&#x2e;&#99;&#111;&#109; portainerqq677519910617 homarrJProxyProwlarrSonarrradarrQq19910617, qbittorrentTransmissionatm\tatm@20230101 docker面板教程：https://post.smzdm.com/p/a6d92p4e/ 1docker run -d -p 9000:9000 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v /docker/portainer_data:/data portainer/portainer-ce 影音制作教程https://blog.51cto.com/u_14731/6842462https://www.bilibili.com/read/cv24460293/ 安装NAS Tools，打造自动化观影、追剧系统，NAS媒体库整理工具，威联通Docker版NAS Tools安装教程~feat.威联通HS 264https://www.youtube.com/watch?v=kUOelSHhfto&amp;t=29s 1. nastool 1docker run -d --name nas-tools --hostname nas-tools -p 3000:3000 -v /media/cqq/移动硬盘/共享文件夹/docker/nastools/config/:/config/ -v /media/cqq/移动硬盘/共享文件夹/video/:/video/ -e PUID=1000 -e PGID=1000 -e UMASK=000 -e NASTOOL_AUTO_UPDATE=false --restart unless-stopped diluka/nas-tools:2.9.1 12admin passwordwjk7179236@126.com QQ19910617 2. jellyfin 1sudo docker run -d --name=jellyfin -e PUID=1000 -e PGID=1000 -e TZ=Asia/Shanghai -e JELLYFIN_PublishedServerUrl=http://192.168.101.10 -p 8096:8096 -v /media/cqq/移动硬盘/共享文件夹/docker/jellyfin/config/:/config/ -v /media/cqq/移动硬盘/共享文件夹/docker/jellyfin/cache/:/cache/ -v /media/cqq/移动硬盘/共享文件夹/video/:/video/ --restart unless-stopped nyanmisaka/jellyfin 1wjk7179236@126.com QQ19910617 3. transmission 1docker run -d --name transmission -p 9091:9091 -p 51413:51413 -v /media/cqq/移动硬盘/共享文件夹/docker/transmission/config/:/config/ -v /media/cqq/移动硬盘/共享文件夹/video/:/downloads/ -e USERNAME=usr -e PASSWORD=password -e PUID=1000 -e PGID=1000 --restart unless-stopped gists/transmission 1USERNAME=usr -e PASSWORD=password 4. jackett教程 https://www.jb51.net/javascript/318994lka.htm 1docker run -d --name=jackett -e PUID=1000 -e PGID=1000 -e TZ=Asia/Shanghai -p 9117:9117 -v /media/cqq/移动硬盘/共享文件夹/docker/jackett/config/:/config/ -v /media/cqq/移动硬盘/共享文件夹/video/:/downloads/ --restart unless-stopped linuxserver/jackett 5. prowlarr 1docker run -d --name=prowlarr -e PUID=1000 -e PGID=1000 -e TZ=Etc/UTC -p 9696:9696 -v /media/cqq/移动硬盘/共享文件夹/docker/jellyfin/config/:/config/ -v /media/cqq/移动硬盘/共享文件夹/docker/jellyfin/cache/:/cache/ -v /media/cqq/移动硬盘/共享文件夹/video/:/video/ --restart unless-stopped linuxserver/prowlarr 6. qbittorrent 1docker run -d --name=qbittorrent -e PUID=1000 -e PGID=1000 -e TZ=Etc/UTC -e WEBUI_PORT=18081 -p 18081:18081 -p 6881:6881 -v /media/cqq/移动硬盘/共享文件夹/docker/qbittorrent/config/:/config/ -v /media/cqq/移动硬盘/共享文件夹/video/:/downloads/ --restart unless-stopped linuxserver/qbittorrent"},{"path":"/2024/08/22/4. samba安装/","content":"1. ubuntu之修改硬盘名称1234567891.查看当前所有分区: sudo fdisk -l 2.查看所有分区磁盘格式: df -T 3.卸载要修改名称的分区: sudo umount /dev/sdb1 # 其中 sdb1为需要修改的硬盘 4.修改名称:（适用于NTFS）sudo ntfslabel /dev/sdb1 newname （适用于ext2或ext3）sudo e2label /dev/sdb1 newname Ubuntu：与Windows共享文件夹https://blog.csdn.net/rangfei/article/details/124225799 Ubuntu 22.04.2 samba共享目录后，Windows无法访问共享文件夹解决方法记录https://blog.csdn.net/weixin_49197731/article/details/129458141"},{"title":"Hello World","path":"/2024/08/22/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment"},{"title":"Hello World","path":"/2024/08/22/ubuntu-md/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Markdown语法 一. ubuntu镜像下载地址ubuntu-22.04.4-desktop-amd64.iso 二. 镜像工具三. ssh服务12$ sudo apt update$ sudo apt install -y ssh More info: Writing Run server$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment"},{"title":"categories","path":"/categories/index.html","content":"layout: categoryindex: truetitle: 所有分类sidebar: [blogger, music, category, tagcloud, webinfo]"},{"title":"tags","path":"/tags/index.html","content":"layout: tagindex: truetitle: 所有标签sidebar: [blogger, music, category, tagcloud, webinfo]"}]